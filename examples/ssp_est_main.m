% ssp_estimation_main.m
clc
close all;

% Define SSP parameter for estimation (this sets up the true SSP field)
params.names = {'ssp_grid'};
% Note: We don't need mu/Sigma for ssp_grid as it's generated by GP

% Set up simulation environment
[data, s, sceneFigure] = setupUnderwaterSimulation('Parameters', struct('names', {{'ssp_grid'}}));

% Initialize GP model for estimation
gp_config.ell_h = 300;    % horizontal correlation length
gp_config.ell_v = 20;     % vertical correlation length
gp_config.sigma_f = 1;    % standard deviation of fluctuations
gp_config.noise_std = 0.1; % measurement noise

gp_config.filename = 'ssp_estimate.ssp';

% Create GP model
data.ssp_gp = SSPGaussianProcess(gp_config); % starts with a reasonable prior, and contains the estimated ssp_grid 

% Initialize figure handles for visualization
figure_handles = struct();
figure_handles.main = figure('Name', 'SSP Estimation Progress', 'Position', [100 100 1200 800]);

% Main estimation loop
for iter = 1:s.N

    % 1. Choose next measurement location
    data = pos_next_measurement(data, s);
    
    % Get current position (fix for undefined pos variable)
    idx = find(isfinite(data.x), 1, 'last');
    current_pos = [data.x(idx), data.y(idx), data.z(idx)];
    
    % 2. Take measurement (simulate using true SSP)
    measurement = forward_model(data.true_params.getMap(), current_pos, s);
    
    % 3. Update GP model with measurement
    data.ssp_gp.update(current_pos, measurement);
    
    % 4. Generate SSP file for acoustic model (for future forward models)
    data.ssp_gp.writeSSPFile();
    
    % 5. Update estimated parameters with current SSP grid
    data.estimated_params.set('ssp_grid', data.ssp_gp.getCurrentSSPGrid());
    
    % 6. Calculate and store errors
    errors(iter) = calculate_ssp_errors(data.ssp_gp, data.true_params.get('ssp_grid'), s);

    % 7. Visualize current estimate
    if mod(iter, 5) == 0 || iter == 1  % Update visualization every 5 iterations
        update_visualization(figure_handles, data, errors, s, iter);
    end
    
    % Print progress
    fprintf('Iteration %d/%d: RMSE=%.3f m/s, Observations=%d\n', ...
            iter, s.N, errors(iter).rmse, errors(iter).num_observations);
end

% Plot final results
plot_estimation_results(errors, data.ssp_gp, data.true_params.get('ssp_grid'), s);

