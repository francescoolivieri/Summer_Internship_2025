% ssp_estimation_main.m
clc
close all;

% Define SSP parameter for estimation (this sets up the true SSP field)
params.names = {'ssp_grid'};
% Note: We don't need mu/Sigma for ssp_grid as it's generated by GP

% Set up simulation environment
[data, s, sceneFigure] = setupUnderwaterSimulation('Parameters', struct('names', {{'ssp_grid'}}));

% Initialize GP model for estimation
config.ell_h = 400;    % horizontal correlation length (m)
config.ell_v = 20;     % vertical correlation length (m)
config.sigma_f = 1.0;   % Prior std dev of the SSP field (m/s)

% Likelihood Noise
config.tl_noise_std = 2.; % measurement noise
config.filename = 'ssp_estimate';

% MCMC Sample Parameters
% These require tuning! Start with these and adjust.
config.mcmc_iterations = 50; % Total steps in the MCMC chain
config.mcmc_burn_in = 0;     % Steps to discard to let the chain converge
config.proposal_std = 0.01;     % Scales the size of MCMC proposal steps.
                               % Tune this to get an acceptance rate of ~20-40%.


% --- Initialization ---
% Create an instance of the class. This will take time as it computes
% the large prior covariance matrix for the entire grid.
data.ssp_estimator = SSPGaussianProcessMCMC(config);  
data.estimated_params.set('ssp_grid', data.ssp_estimator.posterior_mean_ssp);

before = forward_model(data.true_params, [0.5 1 20], s);
after = forward_model(data.estimated_params, [0.5 1 20], s);

fprintf("BEGINNING TL Difference: %f \n", sum(abs(before - after), 'all'));
fprintf("SSPfield Difference: %f \n", sum(abs(data.true_params.get('ssp_grid') - data.estimated_params.get('ssp_grid')), 'all'));


% Main estimation loop
for iter = 1:s.N
    % 1. Choose next measurement location
    data = pos_next_measurement(data, s);
    
    % Get current position (fix for undefined pos variable)
    idx = find(isfinite(data.x), 1, 'last');
    current_pos = [data.x(idx), data.y(idx), data.z(idx)];
    
    % 2. Take measurement (simulate using true SSP)
    measurement = forward_model(data.true_params, current_pos, s);
    
    % 3. Update GP with sophisticated inversion
    data.ssp_estimator.update(current_pos, measurement, data.estimated_params);
    
    % 4. Generate SSP file for acoustic model (for future forward models)
    data.ssp_estimator.writeSSPFile();
                
    
    % 5. Update estimated parameters with current SSP grid
    data.estimated_params.set('ssp_grid', data.ssp_estimator.posterior_mean_ssp);
    
    after = forward_model(data.estimated_params, [0.5 1 20], s);

    fprintf("END TL Difference: %f \n", sum(abs(before - after), 'all'));
    fprintf("SSPfield Difference: %f \n", sum(abs(data.true_params.get('ssp_grid') - data.estimated_params.get('ssp_grid')), 'all'));


end

fprintf("END TL Difference: %f \n", sum(abs(before - after), 'all'));
fprintf("SSPfield Difference: %f \n", sum(abs(data.true_params.get('ssp_grid') - data.estimated_params.get('ssp_grid')), 'all'));


% --- Get the Estimated SSP ---
% This is your best guess for the current sound speed profile
estimated_ssp = data.ssp_estimator.posterior_mean_ssp;

% --- Get the Uncertainty ---
% This is the standard deviation at each grid point, indicating where
% the model is most and least certain.
ssp_uncertainty = data.ssp_estimator.getUncertaintyGrid();

% --- Visualize the Results ---
% For example, plot a vertical slice at a specific x, y location
figure;
subplot(1, 2, 1);
z_coords = data.ssp_estimator.grid_z;
% Assuming you want to plot the slice at the first x and y grid points
ssp_slice = squeeze(estimated_ssp(1, 1, :));
plot(ssp_slice, z_coords);
set(gca, 'YDir','reverse');
xlabel('Sound Speed (m/s)');
ylabel('Depth (m)');
title('Posterior Mean SSP Slice');
grid on;

subplot(1, 2, 2);
uncertainty_slice = squeeze(ssp_uncertainty(1, 1, :));
plot(uncertainty_slice, z_coords);
set(gca, 'YDir','reverse');
xlabel('Uncertainty (std dev, m/s)');
ylabel('Depth (m)');
title('Posterior Uncertainty');
grid on;


% --- Save the Final SSP for Bellhop ---
% You can now write the final, estimated SSP to a file for other uses.
data.ssp_estimator.writeSSPFile('final_estimated_ssp.ssp');